name: Apply Terraform

on:
  push:
    paths:
      - '**.tf'
      - '**.rb'

  workflow_dispatch:

jobs:

  terraform-apply-chef-infra:

    runs-on: ubuntu-latest 
    env:
      tf_version: '1.0.3'
      tf_working_dir: ./terraform/chef/
      tf_modules_dir: ./terraform/modules/**
      chef_username: dmw2151

    steps:
      
      - uses: actions/checkout@v2
      
      - name: Install Apt
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq 
      
      - name: Get Github action IP
        id: ip
        uses: haythem/public-ip@v1.2

      - name: Terraform Init
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          args: '-var="deployer_ip=${{ secrets.CHEF_SSH_VPC_CIDR }}"'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
     
      - name: Terraform Format - Main
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'fmt'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
        
      - name: Terraform Format - Modules
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'fmt'
          tf_actions_working_dir: ${{ env.tf_modules_dir }}

      - name: Terraform Validate - All
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'validate'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply - All
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'apply'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
          args: '-var="deployer_ip=${{ secrets.CHEF_SSH_VPC_CIDR }}"'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    
      - name: Terraform Get Output
        id: terraform
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.tf_version }}
          tf_actions_subcommand: 'output'
          tf_actions_working_dir: ${{ env.tf_working_dir }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      - name: Setting environment variables..
        run: |
          set -x;
          CHEF__WORKSTATION_IP=$(echo  '${{ steps.terraform.outputs.tf_actions_output  }}' | jq -r '.workstation_ip.value' ) 
          echo "AWS_DEFAULT_REGION=us-east-1" >> $GITHUB_ENV
          echo "CHEF__WORKSTATION_IP=$CHEF__WORKSTATION_IP" >> $GITHUB_ENV
      
      - name: Add Github Actions IP to Security group
        run: |
          set -x;
          AWS__SG=`( echo '${{ steps.terraform.outputs.tf_actions_output }}' | jq -r '.ssh_group_id.value' )`
          aws ec2 authorize-security-group-ingress \
            --group-id $AWS__SG \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32    
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}

      - name: Copy Cookbook to WorkStation
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.CHEF__WORKSTATION_IP }} 
          username: "ubuntu"
          port: 22
          key: ${{ secrets.CHEF__WORKSTATION_SSH_KEY }}
          overwrite: true
          source: 'chef-repo/cookbooks/jupyter/**'
          target: '~/'
      
      - name: Update Worker Role
        uses: appleboy/ssh-action@master
        env:
          CHEF__USER_NAME: ${{ env.chef_username }} 
        with:
          host: ${{ env.CHEF__WORKSTATION_IP }}
          username: "ubuntu"
          key: ${{ secrets.CHEF__WORKSTATION_SSH_KEY }}
          port: 22
          envs: CHEF__USER_NAME
          script: |
            set -x;
            knife role run_list set worker "recipe[jupyter::common-apt-get]", "recipe[jupyter::common-efs-dir]" --user $CHEF__USER_NAME --config /home/ubuntu/.chef/knife.rb

      - name: Update Server Role
        uses: appleboy/ssh-action@master
        env:
          CHEF__USER_NAME: ${{ env.chef_username }} 
        with:
          host: ${{ env.CHEF__WORKSTATION_IP }}
          username: "ubuntu"
          key: ${{ secrets.CHEF__WORKSTATION_SSH_KEY }}
          port: 22
          envs: CHEF__USER_NAME
          script: |
            set -x;
            knife role run_list set server "role[worker]",  "recipe[jupyter::hub-master-docker-init]", "recipe[jupyter::hub-master-jupyter]", "recipe[jupyter::hub-master-nginx]" --user $CHEF__USER_NAME --config /home/ubuntu/.chef/knife.rb

      - name: Push Cookbooks
        uses: appleboy/ssh-action@master
        env:
          CHEF__USER_NAME: ${{ env.chef_username }} 
        with:
          host: ${{ env.CHEF__WORKSTATION_IP }}
          username: "ubuntu"
          key: ${{ secrets.CHEF__WORKSTATION_SSH_KEY }}
          port: 22
          envs: CHEF__USER_NAME
          script: |
            set -x;
            knife cookbook upload jupyter \
              --config /home/ubuntu/.chef/knife.rb \
              --user $CHEF__USER_NAME \
              --include-dependencies
      
      - name: Init SSH Forwarding Agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
            ssh-private-key: ${{ secrets.CHEF__WORKSTATION_SSH_KEY }}
            
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/workstation.key
          chmod 600 ~/.ssh/workstation.key
          cat >>~/.ssh/config <<END
          Host workstation
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/workstation.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: "ubuntu"
          SSH_KEY: ${{ secrets.CHEF__WORKSTATION_SSH_KEY }}
          SSH_HOST: ${{ env.CHEF__WORKSTATION_IP }}

      - name: Run Client on Worker Nodes
        run: |
          set -x;
          ssh -A workstation knife ssh 'role:worker' 'sudo chef-client' \
            --ssh-user ubuntu \
            --user ${{ env.chef_username }} \
            --config /home/ubuntu/.chef/knife.rb
          
      - name: Run Client on Server Nodes
        run: |
          set -x;
          ssh -A workstation knife ssh 'role:server' 'sudo chef-client' \
            --ssh-user ubuntu \
            --user ${{ env.chef_username }} \
            --config /home/ubuntu/.chef/knife.rb

      - name: Remove Actions IP from Security Group
        run: |
          set -x;
          AWS__SG=`( echo '${{ steps.terraform.outputs.tf_actions_output }}' | jq -r '.ssh_group_id.value' )`
          aws ec2 revoke-security-group-ingress \
            --group-id $AWS__SG \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
        if: always()